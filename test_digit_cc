2022.10.06

---

1. Analog vs Digital
    
    1) Analog 특징
    
    - 연속적인 값 ⇒ 일부 신호로 대표 신호를 만들 수 없다.
    - 잡음에 영향을 받기 쉽다.
    
    2) Digital 특징
    
    - 일부 신호로 전체를 표현할 수 있다.
    - 잡음에 비교적 강하다.
    - 신호 처리를 쉽게 할 수 있다 ⇒ Digital Signal Processing(DSP)

※샘플링 이론(Nyquist Sampling Theory) 

$$
f_s={1 \over T_s} \ge 2f_0
$$

: 신호를 복원했을 때 기존 아날로그 신의 유실 없이 복원하기 위해서 필요한 샘플링 주파수

-bit : 디지털 신호 단위 / 0, 1 로 구성

1. 논리게이트
    
    1) Buffer (입력 → 출력 전달)
    
    ![[그림 1] 버퍼 회로 (출처: [https://blog.daum.net/jonghun_jugumke/13](https://blog.daum.net/jonghun_jugumke/13))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c09cf0a0-be80-4e04-89a7-d442308fe8ac/Untitled.png)
    
    [그림 1] 버퍼 회로 (출처: [https://blog.daum.net/jonghun_jugumke/13](https://blog.daum.net/jonghun_jugumke/13))
    
    용도: reshaping → 확실한 이산 값을 만들기 위함
    
       fanout 증가 (구동전류 많음)
    
    2) NOT gate
    
    ![[그림 2] NOT gate (출처:[https://projectiot123.com/2019/05/24/introduction-to-not-gate/](https://projectiot123.com/2019/05/24/introduction-to-not-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5452aedd-4da2-4a6d-8530-23a49aa5e1fd/Untitled.png)
    
    [그림 2] NOT gate (출처:[https://projectiot123.com/2019/05/24/introduction-to-not-gate/](https://projectiot123.com/2019/05/24/introduction-to-not-gate/))
    
    ![[그림 3] NOT gate의 활용 - Transistor(TR) (출처:[https://projectiot123.com/2019/05/24/introduction-to-not-gate/](https://projectiot123.com/2019/05/24/introduction-to-not-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/038f0e48-c4ed-4c82-a3aa-d0f8f9f926e3/Untitled.png)
    
    [그림 3] NOT gate의 활용 - Transistor(TR) (출처:[https://projectiot123.com/2019/05/24/introduction-to-not-gate/](https://projectiot123.com/2019/05/24/introduction-to-not-gate/))
    
    Transistor=TR → 신호증폭용(아날로그)
    
                          스위칭용(디지털) → off(신호 X=0) → 5[V]
    
                                                  → on(신호 O=1) → 0[V]
    
    3) AND gate : 둘 다 1이면 1
    
    ![[그림 4] AND gate (출처:[https://projectiot123.com/2019/05/24/introduction-to-and-gate/](https://projectiot123.com/2019/05/24/introduction-to-and-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f3d62913-3fff-436d-8417-e1c6370456d1/Untitled.png)
    
    [그림 4] AND gate (출처:[https://projectiot123.com/2019/05/24/introduction-to-and-gate/](https://projectiot123.com/2019/05/24/introduction-to-and-gate/))
    
    ![[그림 5] AND gate의 활용 (출처:[https://projectiot123.com/2019/05/24/introduction-to-and-gate/](https://projectiot123.com/2019/05/24/introduction-to-and-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a9998327-6426-4e70-a14b-f911bfba8c0a/Untitled.png)
    
    [그림 5] AND gate의 활용 (출처:[https://projectiot123.com/2019/05/24/introduction-to-and-gate/](https://projectiot123.com/2019/05/24/introduction-to-and-gate/))
    
    4) OR Gate : 하나라도 1이면 1
    
    ![[그림 6] OR Gate (출처:[https://projectiot123.com/2019/05/25/introduction-to-or-gate/](https://projectiot123.com/2019/05/25/introduction-to-or-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f5a8cf5-8565-4490-ba3e-9d4423c84702/Untitled.png)
    
    [그림 6] OR Gate (출처:[https://projectiot123.com/2019/05/25/introduction-to-or-gate/](https://projectiot123.com/2019/05/25/introduction-to-or-gate/))
    
    ![[그림 7] OR Gate의 활용 (출처:[https://projectiot123.com/2019/05/25/introduction-to-or-gate/](https://projectiot123.com/2019/05/25/introduction-to-or-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/680ca60a-0749-48f6-9f8f-fdc52abccfad/Untitled.png)
    
    [그림 7] OR Gate의 활용 (출처:[https://projectiot123.com/2019/05/25/introduction-to-or-gate/](https://projectiot123.com/2019/05/25/introduction-to-or-gate/))
    
    5) XOR (Exclusive OR) : 둘 다 다를 때만
    
    ![[그림 8] XOR Gate (출처:[https://projectiot123.com/2019/05/26/introduction-to-xor-gate/](https://projectiot123.com/2019/05/26/introduction-to-xor-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/50362b8a-152e-438c-bc7d-911af5f78a49/Untitled.png)
    
    [그림 8] XOR Gate (출처:[https://projectiot123.com/2019/05/26/introduction-to-xor-gate/](https://projectiot123.com/2019/05/26/introduction-to-xor-gate/))
    
    ![[그림 9] XOR Gate 진리표 (출처:[https://projectiot123.com/2019/05/26/introduction-to-xor-gate/](https://projectiot123.com/2019/05/26/introduction-to-xor-gate/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c69f016-8fb0-49b8-8253-57e9c956d3af/Untitled.png)
    
    [그림 9] XOR Gate 진리표 (출처:[https://projectiot123.com/2019/05/26/introduction-to-xor-gate/](https://projectiot123.com/2019/05/26/introduction-to-xor-gate/))
    
    ---
    
    6) MUX (Multiplex) : 2개 중 1개 선택
    
    ![[그림 10] MUX (출처:[https://projectiot123.com/2019/07/31/introduction-to-multiplexer/](https://projectiot123.com/2019/07/31/introduction-to-multiplexer/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3d1f579a-cc26-4fbd-bc6a-9d779e80c1e1/Untitled.png)
    
    [그림 10] MUX (출처:[https://projectiot123.com/2019/07/31/introduction-to-multiplexer/](https://projectiot123.com/2019/07/31/introduction-to-multiplexer/))
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d61c2150-17cb-4702-87fb-ed38e7544266/Untitled.png)
    
    [그림 11] MUX 진리표 (출처:[https://projectiot123.com/2019/07/31/introduction-to-multiplexer/](https://projectiot123.com/2019/07/31/introduction-to-multiplexer/))
    
    7) Flip Flop ⇒ 메모리 소자(신호 기억) : 1 bit의 정보를 보관 또는 유지 가능
    
    - SR Latch : S=Set / R=Reset
        1. SR NOR latch
            
            ![[그림 12] SR NOR latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c1288a6-219e-48b3-a8b2-81d3f9ac583e/Untitled.png)
            
            [그림 12] SR NOR latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))
            
        2. SR NAND latch
            
            ![[그림 13] SR NAND latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f87fe5c2-929f-48ad-8d5b-56f782f17c5b/Untitled.png)
            
            [그림 13] SR NAND latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))
            
        3. 게이트 SR NOR latch
            
            ![[그림 14] 게이트 SR NOR latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/05204cca-b782-4ee4-b500-5148901e7be8/Untitled.png)
            
            [그림 14] 게이트 SR NOR latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))
            
        4. 게이트 SR NAND latch
        
        ![[그림 15] 게이트 SR NAND latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/70f27ef1-7d77-4c4a-8603-319433723417/Untitled.png)
        
        [그림 15] 게이트 SR NAND latch (출처:[https://blog.naver.com/lagrange0115/220722338106](https://blog.naver.com/lagrange0115/220722338106))
        
    
    ![[그림 12] D Flip-flop 회로 (출처:[https://circuitdigest.com/electronic-circuits/d-flip-flops](https://circuitdigest.com/electronic-circuits/d-flip-flops))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a3c0fafd-5341-4488-bab0-b87586a06e91/Untitled.png)
    
    [그림 12] D Flip-flop 회로 (출처:[https://circuitdigest.com/electronic-circuits/d-flip-flops](https://circuitdigest.com/electronic-circuits/d-flip-flops))
    
    D : 0, CLK : 0 ⇒ Q : 0
    
    D : 1, CLK :1 ⇒ Q : 1
    
    CLK에 동기화해서 신호 처리 ⇒ “동기식 신호 처리”
    
    ![[그림 13] D Flip-flop 타이밍 차트 (출처:[https://blog.naver.com/lagrange0115/220722547963](https://blog.naver.com/lagrange0115/220722547963))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80610113-3124-4664-be26-182b6c8e20d9/Untitled.png)
    
    [그림 13] D Flip-flop 타이밍 차트 (출처:[https://blog.naver.com/lagrange0115/220722547963](https://blog.naver.com/lagrange0115/220722547963))
    
    8) 카운터 : 주파수를 낮춰주는 역할
    
    - 비동기식 카운터(리플 카운터)
        
        ![[그림 14] 비동기식 카운터 (출처:[카운터 - Counter : 네이버 블로그 (naver.com)](https://blog.naver.com/lagrange0115/220728788565))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f0c5c536-6fa1-42c7-b1bb-d0f84de6fdc0/Untitled.png)
        
        [그림 14] 비동기식 카운터 (출처:[카운터 - Counter : 네이버 블로그 (naver.com)](https://blog.naver.com/lagrange0115/220728788565))
        
    - 동기식 카운터 : 클록을 동시에 모든 플립플롭에 인가하여 작동
        
        ![[그림 15] 동기식 카운터 (출처:[카운터 - Counter : 네이버 블로그 (naver.com)](https://blog.naver.com/lagrange0115/220728788565))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a53b743b-69ff-4129-96e8-ef42d8ec6274/Untitled.png)
        
        [그림 15] 동기식 카운터 (출처:[카운터 - Counter : 네이버 블로그 (naver.com)](https://blog.naver.com/lagrange0115/220728788565))
        
    
    ![[그림 16] D Flip-flop을 이용한 비동기식 카운터 (출처:[https://www.electronicshub.org/asynchronous-counter/](https://www.electronicshub.org/asynchronous-counter/))](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c8c5fa70-852f-487a-af7b-2fa7e81e1b54/Untitled.png)
    
    [그림 16] D Flip-flop을 이용한 비동기식 카운터 (출처:[https://www.electronicshub.org/asynchronous-counter/](https://www.electronicshub.org/asynchronous-counter/))
